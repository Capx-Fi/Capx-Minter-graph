// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class NewERC20Implementation extends ethereum.Event {
  get params(): NewERC20Implementation__Params {
    return new NewERC20Implementation__Params(this);
  }
}

export class NewERC20Implementation__Params {
  _event: NewERC20Implementation;

  constructor(event: NewERC20Implementation) {
    this._event = event;
  }

  get typeOfToken(): string {
    return this._event.parameters[0].value.toString();
  }

  get typeID(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get implementation(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get isReflective(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get features(): Array<boolean> {
    return this._event.parameters[4].value.toBooleanArray();
  }
}

export class NewTokenDeployed extends ethereum.Event {
  get params(): NewTokenDeployed__Params {
    return new NewTokenDeployed__Params(this);
  }
}

export class NewTokenDeployed__Params {
  _event: NewTokenDeployed;

  constructor(event: NewTokenDeployed) {
    this._event = event;
  }

  get tokenType(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get documentHash(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class CapxFactory extends ethereum.SmartContract {
  static bind(address: Address): CapxFactory {
    return new CapxFactory("CapxFactory", address);
  }

  autoLPRouter(): Address {
    let result = super.call("autoLPRouter", "autoLPRouter():(address)", []);

    return result[0].toAddress();
  }

  try_autoLPRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("autoLPRouter", "autoLPRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createReflectiveToken(
    _name: string,
    _symbol: string,
    _decimal: i32,
    _supply: BigInt,
    _address: Array<Address>,
    _parameters: Array<BigInt>,
    _typeOfToken: BigInt,
    _documentHash: string
  ): Address {
    let result = super.call(
      "createReflectiveToken",
      "createReflectiveToken(string,string,uint8,uint256,address[2],uint256[5],uint256,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_decimal)),
        ethereum.Value.fromUnsignedBigInt(_supply),
        ethereum.Value.fromAddressArray(_address),
        ethereum.Value.fromUnsignedBigIntArray(_parameters),
        ethereum.Value.fromUnsignedBigInt(_typeOfToken),
        ethereum.Value.fromString(_documentHash)
      ]
    );

    return result[0].toAddress();
  }

  try_createReflectiveToken(
    _name: string,
    _symbol: string,
    _decimal: i32,
    _supply: BigInt,
    _address: Array<Address>,
    _parameters: Array<BigInt>,
    _typeOfToken: BigInt,
    _documentHash: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createReflectiveToken",
      "createReflectiveToken(string,string,uint8,uint256,address[2],uint256[5],uint256,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_decimal)),
        ethereum.Value.fromUnsignedBigInt(_supply),
        ethereum.Value.fromAddressArray(_address),
        ethereum.Value.fromUnsignedBigIntArray(_parameters),
        ethereum.Value.fromUnsignedBigInt(_typeOfToken),
        ethereum.Value.fromString(_documentHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  createToken(
    _name: string,
    _symbol: string,
    _owner: Address,
    _decimal: i32,
    _initialSupply: BigInt,
    _totalSupply: BigInt,
    _typeOfToken: BigInt,
    _documentHash: string
  ): Address {
    let result = super.call(
      "createToken",
      "createToken(string,string,address,uint8,uint256,uint256,uint256,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_decimal)),
        ethereum.Value.fromUnsignedBigInt(_initialSupply),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_typeOfToken),
        ethereum.Value.fromString(_documentHash)
      ]
    );

    return result[0].toAddress();
  }

  try_createToken(
    _name: string,
    _symbol: string,
    _owner: Address,
    _decimal: i32,
    _initialSupply: BigInt,
    _totalSupply: BigInt,
    _typeOfToken: BigInt,
    _documentHash: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createToken",
      "createToken(string,string,address,uint8,uint256,uint256,uint256,string):(address)",
      [
        ethereum.Value.fromString(_name),
        ethereum.Value.fromString(_symbol),
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_decimal)),
        ethereum.Value.fromUnsignedBigInt(_initialSupply),
        ethereum.Value.fromUnsignedBigInt(_totalSupply),
        ethereum.Value.fromUnsignedBigInt(_typeOfToken),
        ethereum.Value.fromString(_documentHash)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployedContracts(param0: BigInt, param1: BigInt): Address {
    let result = super.call(
      "deployedContracts",
      "deployedContracts(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_deployedContracts(
    param0: BigInt,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployedContracts",
      "deployedContracts(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  erc20Implementations(param0: BigInt): Address {
    let result = super.call(
      "erc20Implementations",
      "erc20Implementations(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_erc20Implementations(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "erc20Implementations",
      "erc20Implementations(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  typesOfToken(): BigInt {
    let result = super.call("typesOfToken", "typesOfToken():(uint256)", []);

    return result[0].toBigInt();
  }

  try_typesOfToken(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("typesOfToken", "typesOfToken():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddNewERC20ImplementationCall extends ethereum.Call {
  get inputs(): AddNewERC20ImplementationCall__Inputs {
    return new AddNewERC20ImplementationCall__Inputs(this);
  }

  get outputs(): AddNewERC20ImplementationCall__Outputs {
    return new AddNewERC20ImplementationCall__Outputs(this);
  }
}

export class AddNewERC20ImplementationCall__Inputs {
  _call: AddNewERC20ImplementationCall;

  constructor(call: AddNewERC20ImplementationCall) {
    this._call = call;
  }

  get typeOfToken(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _implementation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _isReflective(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _features(): Array<boolean> {
    return this._call.inputValues[3].value.toBooleanArray();
  }
}

export class AddNewERC20ImplementationCall__Outputs {
  _call: AddNewERC20ImplementationCall;

  constructor(call: AddNewERC20ImplementationCall) {
    this._call = call;
  }
}

export class CreateReflectiveTokenCall extends ethereum.Call {
  get inputs(): CreateReflectiveTokenCall__Inputs {
    return new CreateReflectiveTokenCall__Inputs(this);
  }

  get outputs(): CreateReflectiveTokenCall__Outputs {
    return new CreateReflectiveTokenCall__Outputs(this);
  }
}

export class CreateReflectiveTokenCall__Inputs {
  _call: CreateReflectiveTokenCall;

  constructor(call: CreateReflectiveTokenCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _decimal(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _supply(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _address(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _parameters(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }

  get _typeOfToken(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _documentHash(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class CreateReflectiveTokenCall__Outputs {
  _call: CreateReflectiveTokenCall;

  constructor(call: CreateReflectiveTokenCall) {
    this._call = call;
  }

  get deployed(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class CreateTokenCall extends ethereum.Call {
  get inputs(): CreateTokenCall__Inputs {
    return new CreateTokenCall__Inputs(this);
  }

  get outputs(): CreateTokenCall__Outputs {
    return new CreateTokenCall__Outputs(this);
  }
}

export class CreateTokenCall__Inputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _owner(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _decimal(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _initialSupply(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _totalSupply(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _typeOfToken(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _documentHash(): string {
    return this._call.inputValues[7].value.toString();
  }
}

export class CreateTokenCall__Outputs {
  _call: CreateTokenCall;

  constructor(call: CreateTokenCall) {
    this._call = call;
  }

  get deployed(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _implementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _autoLPRouter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAutoLPRouterCall extends ethereum.Call {
  get inputs(): UpdateAutoLPRouterCall__Inputs {
    return new UpdateAutoLPRouterCall__Inputs(this);
  }

  get outputs(): UpdateAutoLPRouterCall__Outputs {
    return new UpdateAutoLPRouterCall__Outputs(this);
  }
}

export class UpdateAutoLPRouterCall__Inputs {
  _call: UpdateAutoLPRouterCall;

  constructor(call: UpdateAutoLPRouterCall) {
    this._call = call;
  }

  get _autoLPRouter(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateAutoLPRouterCall__Outputs {
  _call: UpdateAutoLPRouterCall;

  constructor(call: UpdateAutoLPRouterCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
