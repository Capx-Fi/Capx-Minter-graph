// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TokenDeployed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDeployed entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenDeployed must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenDeployed", id.toString(), this);
    }
  }

  static load(id: string): TokenDeployed | null {
    return changetype<TokenDeployed | null>(store.get("TokenDeployed", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get typeOfToken(): BigInt | null {
    let value = this.get("typeOfToken");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set typeOfToken(value: BigInt | null) {
    if (!value) {
      this.unset("typeOfToken");
    } else {
      this.set("typeOfToken", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenName(): string | null {
    let value = this.get("tokenName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenName(value: string | null) {
    if (!value) {
      this.unset("tokenName");
    } else {
      this.set("tokenName", Value.fromString(<string>value));
    }
  }

  get tokenSymbol(): string | null {
    let value = this.get("tokenSymbol");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenSymbol(value: string | null) {
    if (!value) {
      this.unset("tokenSymbol");
    } else {
      this.set("tokenSymbol", Value.fromString(<string>value));
    }
  }

  get tokenDecimals(): BigInt | null {
    let value = this.get("tokenDecimals");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDecimals(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDecimals");
    } else {
      this.set("tokenDecimals", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenTotalSupply(): BigInt | null {
    let value = this.get("tokenTotalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenTotalSupply(value: BigInt | null) {
    if (!value) {
      this.unset("tokenTotalSupply");
    } else {
      this.set("tokenTotalSupply", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenOwner(): string | null {
    let value = this.get("tokenOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenOwner(value: string | null) {
    if (!value) {
      this.unset("tokenOwner");
    } else {
      this.set("tokenOwner", Value.fromString(<string>value));
    }
  }

  get tokenDeployer(): string | null {
    let value = this.get("tokenDeployer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenDeployer(value: string | null) {
    if (!value) {
      this.unset("tokenDeployer");
    } else {
      this.set("tokenDeployer", Value.fromString(<string>value));
    }
  }

  get tokenCreatedAt(): BigInt | null {
    let value = this.get("tokenCreatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenCreatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("tokenCreatedAt");
    } else {
      this.set("tokenCreatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get documentHash(): string | null {
    let value = this.get("documentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set documentHash(value: string | null) {
    if (!value) {
      this.unset("documentHash");
    } else {
      this.set("documentHash", Value.fromString(<string>value));
    }
  }
}

export class ERC20Implementation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC20Implementation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ERC20Implementation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC20Implementation", id.toString(), this);
    }
  }

  static load(id: string): ERC20Implementation | null {
    return changetype<ERC20Implementation | null>(
      store.get("ERC20Implementation", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set address(value: string | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromString(<string>value));
    }
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get ERC_20_Compliant(): boolean {
    let value = this.get("ERC_20_Compliant");
    return value!.toBoolean();
  }

  set ERC_20_Compliant(value: boolean) {
    this.set("ERC_20_Compliant", Value.fromBoolean(value));
  }

  get Mintable(): boolean {
    let value = this.get("Mintable");
    return value!.toBoolean();
  }

  set Mintable(value: boolean) {
    this.set("Mintable", Value.fromBoolean(value));
  }

  get Burnable(): boolean {
    let value = this.get("Burnable");
    return value!.toBoolean();
  }

  set Burnable(value: boolean) {
    this.set("Burnable", Value.fromBoolean(value));
  }

  get Ownable(): boolean {
    let value = this.get("Ownable");
    return value!.toBoolean();
  }

  set Ownable(value: boolean) {
    this.set("Ownable", Value.fromBoolean(value));
  }

  get Pauseable(): boolean {
    let value = this.get("Pauseable");
    return value!.toBoolean();
  }

  set Pauseable(value: boolean) {
    this.set("Pauseable", Value.fromBoolean(value));
  }

  get Capped(): boolean {
    let value = this.get("Capped");
    return value!.toBoolean();
  }

  set Capped(value: boolean) {
    this.set("Capped", Value.fromBoolean(value));
  }

  get Liquidity_Generator(): boolean {
    let value = this.get("Liquidity_Generator");
    return value!.toBoolean();
  }

  set Liquidity_Generator(value: boolean) {
    this.set("Liquidity_Generator", Value.fromBoolean(value));
  }

  get Donation_Charity(): boolean {
    let value = this.get("Donation_Charity");
    return value!.toBoolean();
  }

  set Donation_Charity(value: boolean) {
    this.set("Donation_Charity", Value.fromBoolean(value));
  }

  get Yield_Generator(): boolean {
    let value = this.get("Yield_Generator");
    return value!.toBoolean();
  }

  set Yield_Generator(value: boolean) {
    this.set("Yield_Generator", Value.fromBoolean(value));
  }

  get Taxable(): boolean {
    let value = this.get("Taxable");
    return value!.toBoolean();
  }

  set Taxable(value: boolean) {
    this.set("Taxable", Value.fromBoolean(value));
  }

  get Verified(): boolean {
    let value = this.get("Verified");
    return value!.toBoolean();
  }

  set Verified(value: boolean) {
    this.set("Verified", Value.fromBoolean(value));
  }

  get advancedFeatures(): string | null {
    let value = this.get("advancedFeatures");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set advancedFeatures(value: string | null) {
    if (!value) {
      this.unset("advancedFeatures");
    } else {
      this.set("advancedFeatures", Value.fromString(<string>value));
    }
  }
}
